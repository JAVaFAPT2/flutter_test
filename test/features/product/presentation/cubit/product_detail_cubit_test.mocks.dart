// Mocks generated by Mockito 5.4.6 from annotations
// in vietnamese_fish_sauce_app/test/features/product/presentation/cubit/product_detail_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:vietnamese_fish_sauce_app/features/product/domain/entities/product_entity.dart'
    as _i4;
import 'package:vietnamese_fish_sauce_app/features/product/domain/repositories/product_repository.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRepository extends _i1.Mock implements _i2.ProductRepository {
  MockProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.ProductEntity?> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i3.Future<_i4.ProductEntity?>.value(),
      ) as _i3.Future<_i4.ProductEntity?>);

  @override
  _i3.Stream<_i4.ProductEntity?> watchById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #watchById,
          [id],
        ),
        returnValue: _i3.Stream<_i4.ProductEntity?>.empty(),
      ) as _i3.Stream<_i4.ProductEntity?>);

  @override
  _i3.Future<List<_i4.ProductEntity>> list({
    String? category,
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #list,
          [],
          {
            #category: category,
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue:
            _i3.Future<List<_i4.ProductEntity>>.value(<_i4.ProductEntity>[]),
      ) as _i3.Future<List<_i4.ProductEntity>>);

  @override
  _i3.Stream<List<_i4.ProductEntity>> watchList({
    String? category,
    int? limit,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchList,
          [],
          {
            #category: category,
            #limit: limit,
          },
        ),
        returnValue: _i3.Stream<List<_i4.ProductEntity>>.empty(),
      ) as _i3.Stream<List<_i4.ProductEntity>>);

  @override
  _i3.Future<List<_i4.ProductEntity>> related(String? productId) =>
      (super.noSuchMethod(
        Invocation.method(
          #related,
          [productId],
        ),
        returnValue:
            _i3.Future<List<_i4.ProductEntity>>.value(<_i4.ProductEntity>[]),
      ) as _i3.Future<List<_i4.ProductEntity>>);

  @override
  _i3.Future<void> trackView(
    String? productId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackView,
          [
            productId,
            userId,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.ProductEntity>> search(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #search,
          [query],
        ),
        returnValue:
            _i3.Future<List<_i4.ProductEntity>>.value(<_i4.ProductEntity>[]),
      ) as _i3.Future<List<_i4.ProductEntity>>);

  @override
  _i3.Future<List<_i4.ProductEntity>> getFeatured() => (super.noSuchMethod(
        Invocation.method(
          #getFeatured,
          [],
        ),
        returnValue:
            _i3.Future<List<_i4.ProductEntity>>.value(<_i4.ProductEntity>[]),
      ) as _i3.Future<List<_i4.ProductEntity>>);

  @override
  _i3.Future<List<_i4.ProductEntity>> getOnSale() => (super.noSuchMethod(
        Invocation.method(
          #getOnSale,
          [],
        ),
        returnValue:
            _i3.Future<List<_i4.ProductEntity>>.value(<_i4.ProductEntity>[]),
      ) as _i3.Future<List<_i4.ProductEntity>>);
}
