#!/bin/bash

# Pre-commit hook for Vietnamese Fish Sauce E-commerce App
# Enforces ZERO-WARNING POLICY before allowing commits

set -e

echo "🚀 Running Flutter Zero-Warning Quality Gates..."
echo "==============================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${2:-$GREEN}$1${NC}"
}

print_error() {
    echo -e "${RED}❌ ERROR: $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  WARNING: $1${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    print_error "Not in a git repository"
    exit 1
fi

# Check if Flutter is available
if ! command -v flutter &> /dev/null; then
    print_error "Flutter command not found. Please install Flutter and add it to PATH."
    exit 1
fi

# Stash any uncommitted changes to avoid conflicts during analysis
STASHED=false
if ! git diff --quiet || ! git diff --staged --quiet; then
    print_warning "Stashing uncommitted changes..."
    if git stash push -q -m "pre-commit stash"; then
        STASHED=true
    fi
fi

cleanup() {
    # Restore stashed changes if any
    if [ "$STASHED" = true ]; then
        print_warning "Restoring stashed changes..."
        git stash pop -q
    fi
}

trap cleanup EXIT

# 1. Format check
print_status "📝 Checking code formatting..." "$YELLOW"
if ! dart format --set-exit-if-changed . > /dev/null 2>&1; then
    print_error "Code is not properly formatted!"
    print_error "Run 'dart format .' to fix formatting issues."
    exit 1
fi
print_success "Code formatting: PASSED"

# 2. Analyze check
print_status "🔍 Running static analysis..." "$YELLOW"
if ! flutter analyze --fatal-infos > /dev/null 2>&1; then
    print_error "Static analysis found warnings/errors!"
    print_error "Run 'flutter analyze' to see the issues."
    print_error "Fix all warnings before committing."
    exit 1
fi
print_success "Static analysis: PASSED"

# 3. Doctor check
print_status "🏥 Checking Flutter installation..." "$YELLOW"
if ! flutter doctor > /dev/null 2>&1; then
    print_warning "Flutter doctor found issues, but continuing..."
    # Don't fail on doctor issues as they might be environment-specific
fi
print_success "Flutter doctor: CHECKED"

# 4. Check for TODO comments
print_status "📋 Checking for TODO comments..." "$YELLOW"
if grep -r --include="*.dart" -i "TODO" lib/ > /dev/null 2>&1; then
    print_error "Found TODO comments in code!"
    print_error "Please replace TODO comments with proper implementation or issue tracking."
    exit 1
fi
print_success "No TODO comments found"

# 5. Check for print statements
print_status "🖨️  Checking for print statements..." "$YELLOW"
if grep -r --include="*.dart" "print(" lib/ > /dev/null 2>&1; then
    print_error "Found print() statements in production code!"
    print_error "Please use proper logging instead of print statements."
    exit 1
fi
print_success "No print statements found"

# 6. Check for unused imports
print_status "🧹 Checking for unused imports..." "$YELLOW"
if ! dart fix --dry-run --apply 2>/dev/null | grep -q "Nothing to fix"; then
    print_error "Found unused imports or other fixable issues!"
    print_error "Run 'dart fix --apply' to automatically fix these issues."
    exit 1
fi
print_success "No unused imports found"

# 7. Check for deprecated APIs
print_status "📚 Checking for deprecated APIs..." "$YELLOW"
if flutter analyze 2>&1 | grep -i "deprecated" > /dev/null; then
    print_error "Found usage of deprecated APIs!"
    print_error "Please update to use the recommended alternatives."
    exit 1
fi
print_success "No deprecated APIs found"

# 8. Dependency check
print_status "📦 Checking dependencies..." "$YELLOW"
if ! flutter pub get > /dev/null 2>&1; then
    print_error "Failed to resolve dependencies!"
    print_error "Run 'flutter pub get' to resolve dependency issues."
    exit 1
fi
print_success "Dependencies: OK"

print_success "🎉 ZERO-WARNING POLICY: ALL CHECKS PASSED!"
print_status "✨ Ready to commit!" "$GREEN"

exit 0